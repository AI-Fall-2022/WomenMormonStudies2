{"ast":null,"code":"import { BottomNavigation } from \"@mui/material\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport MainNavigation from \"./componenet/MainNav.js\";\nimport Search from \"./componenet/Search.js\";\nimport initialDetails from \"./data/initialDetails.js\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register.js\";\nimport Vision from \"./pages/Vision.js\";\n\nfunction App() {\n  async function getDataPromise() {\n    // Want to wait for fetch request\n    const response = await fetch(\"http://localhost:3000/api\");\n\n    async function getStreamFromBody(body) {\n      const reader = await body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          // The following function handles each data chunk\n          async function push() {\n            // \"done\" is a Boolean and value a \"Uint8Array\"\n            reader.read().then(_ref => {\n              let {\n                done,\n                value\n              } = _ref;\n\n              // If there is no more data to read\n              if (done) {\n                controller.close();\n                return;\n              } // Get the data and send it to the browser via the controller\n\n\n              controller.enqueue(value);\n              push();\n            });\n          }\n\n          push();\n        }\n\n      });\n    } // Ready in request as a strea\n\n\n    const stream = await response.body; // Translate stream -> string -> map\n\n    const result = await new Response(stream, {\n      headers: {\n        'Content-Type': 'text/html'\n      }\n    }).text();\n\n    function getProfiles() {\n      const dataMap = JSON.parse(result); // var profileDetails = dataMap[\"users\"]\n      // return profileDetails\n      // Try to return as array instead\n\n      return Object.values(dataMap);\n    }\n\n    return getProfiles();\n  } // Get Map from promise\n\n\n  function getValueFromPromise() {\n    const dataPromise = Promise.resolve(getDataPromise());\n    return dataPromise.then(data => {\n      return data[0];\n    });\n  }\n\n  const valuesPromise = getValueFromPromise;\n  valuesPromise.then(data => {\n    console.log(data);\n  }); // console.log('ProfileData:')\n  // console.log(profileData[0]) // write a non retarded way of getting this\n  // console.log(typeof(profileData))\n  // console.log('InitialDetails')\n  // console.log(initialDetails)\n  // console.log(typeof(initialDetails))\n  // Waitiing to fetch profile data\n  // if (typeof(profileDetails) == 'undefined' || typeof(profileDetails) == 'object Promise' || typeof(profileDetails) == 'Promise') {\n  //   return (\n  //     <div>\n  //       <p>Loading...</p>\n  //     </div>\n  //   )\n  // }\n  // Content had loaded\n  // else {\n  //   return (\n  //     <Router>\n  //     <Fragment>\n  //       <MainNavigation/>\n  //       <Routes>\n  //         <Route exact path='/' element={<Home/>}>\n  //           {/* <Route exact path='/' element={<Home/>}/> */}\n  //         </Route>\n  //         <Route exact path='/search' element={<Search details={initialDetails}/>}/>\n  //         {/* <Route exact path='/login' element={<Login/>}/> */}\n  //         <Route exact path='/register' element={<Register/>}/>\n  //         <Route exact path='/vision' element={<Vision/>}/>\n  //       </Routes>\n  //     </Fragment>\n  //     <BottomNavigation> 1 2 3 4</BottomNavigation>\n  //   </Router>\n  //   );\n  // }\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BottomNavigation","React","useEffect","useState","Fragment","BrowserRouter","Router","Routes","Route","MainNavigation","Search","initialDetails","Home","Register","Vision","App","getDataPromise","response","fetch","getStreamFromBody","body","reader","getReader","ReadableStream","start","controller","push","read","then","done","value","close","enqueue","stream","result","Response","headers","text","getProfiles","dataMap","JSON","parse","Object","values","getValueFromPromise","dataPromise","Promise","resolve","data","valuesPromise","console","log"],"sources":["/Users/ronnaksaxena/Desktop/School/Y4S1/Thesis/WomenMormonStudies2/client/src/App.js"],"sourcesContent":["import { BottomNavigation } from \"@mui/material\";\nimport React, {useEffect, useState, Fragment} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport MainNavigation from \"./componenet/MainNav.js\";\nimport Search from \"./componenet/Search.js\";\nimport initialDetails from \"./data/initialDetails.js\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register.js\";\nimport Vision from \"./pages/Vision.js\";\n\n\nfunction App() {\n\n  async function getDataPromise() {\n    // Want to wait for fetch request\n  const response = await fetch(\"http://localhost:3000/api\")\n  async function getStreamFromBody(body) {\n    const reader = await body.getReader();\n\n    return new ReadableStream({\n      start(controller) {\n        // The following function handles each data chunk\n        async function push() {\n          // \"done\" is a Boolean and value a \"Uint8Array\"\n          reader.read().then(({ done, value }) => {\n            // If there is no more data to read\n            if (done) {\n              controller.close();\n              return;\n            }\n            // Get the data and send it to the browser via the controller\n            controller.enqueue(value);\n            push();\n          });\n        }\n\n        push();\n      },\n    });\n  }\n    // Ready in request as a strea\n    const stream = await (response.body);\n    // Translate stream -> string -> map\n    const result = await new Response(stream, { headers: { 'Content-Type': 'text/html' } }).text()\n    function getProfiles() {\n      const dataMap = JSON.parse(result);\n      // var profileDetails = dataMap[\"users\"]\n      // return profileDetails\n      // Try to return as array instead\n      return Object.values(dataMap);\n    }\n    return getProfiles()\n  }\n  // Get Map from promise\n  function getValueFromPromise() {\n    const dataPromise = Promise.resolve(getDataPromise())\n    return dataPromise.then((data) => {\n      return data[0]\n    })\n  }\n  const valuesPromise = getValueFromPromise;\n  valuesPromise.then((data) => {\n    console.log(data)\n  })\n\n  \n\n\n\n\n  // console.log('ProfileData:')\n  // console.log(profileData[0]) // write a non retarded way of getting this\n  // console.log(typeof(profileData))\n  // console.log('InitialDetails')\n  // console.log(initialDetails)\n  // console.log(typeof(initialDetails))\n\n  // Waitiing to fetch profile data\n  // if (typeof(profileDetails) == 'undefined' || typeof(profileDetails) == 'object Promise' || typeof(profileDetails) == 'Promise') {\n  //   return (\n\n  //     <div>\n  //       <p>Loading...</p>\n  //     </div>\n  //   )\n  // }\n  // Content had loaded\n  // else {\n  //   return (\n  //     <Router>\n  //     <Fragment>\n  //       <MainNavigation/>\n  //       <Routes>\n  //         <Route exact path='/' element={<Home/>}>\n  //           {/* <Route exact path='/' element={<Home/>}/> */}\n  //         </Route>\n  //         <Route exact path='/search' element={<Search details={initialDetails}/>}/>\n  //         {/* <Route exact path='/login' element={<Login/>}/> */}\n  //         <Route exact path='/register' element={<Register/>}/>\n  //         <Route exact path='/vision' element={<Vision/>}/>\n  \n  //       </Routes>\n  //     </Fragment>\n  //     <BottomNavigation> 1 2 3 4</BottomNavigation>\n  //   </Router>\n  //   );\n  // }\n\n}\n\nexport default App;\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,eAAjC;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,QAApC,QAAmD,OAAnD;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,QAIO,kBAJP;AAKA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAGA,SAASC,GAAT,GAAe;EAEb,eAAeC,cAAf,GAAgC;IAC9B;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAAD,CAA5B;;IACA,eAAeC,iBAAf,CAAiCC,IAAjC,EAAuC;MACrC,MAAMC,MAAM,GAAG,MAAMD,IAAI,CAACE,SAAL,EAArB;MAEA,OAAO,IAAIC,cAAJ,CAAmB;QACxBC,KAAK,CAACC,UAAD,EAAa;UAChB;UACA,eAAeC,IAAf,GAAsB;YACpB;YACAL,MAAM,CAACM,IAAP,GAAcC,IAAd,CAAmB,QAAqB;cAAA,IAApB;gBAAEC,IAAF;gBAAQC;cAAR,CAAoB;;cACtC;cACA,IAAID,IAAJ,EAAU;gBACRJ,UAAU,CAACM,KAAX;gBACA;cACD,CALqC,CAMtC;;;cACAN,UAAU,CAACO,OAAX,CAAmBF,KAAnB;cACAJ,IAAI;YACL,CATD;UAUD;;UAEDA,IAAI;QACL;;MAlBuB,CAAnB,CAAP;IAoBD,CA1B+B,CA2B9B;;;IACA,MAAMO,MAAM,GAAG,MAAOhB,QAAQ,CAACG,IAA/B,CA5B8B,CA6B9B;;IACA,MAAMc,MAAM,GAAG,MAAM,IAAIC,QAAJ,CAAaF,MAAb,EAAqB;MAAEG,OAAO,EAAE;QAAE,gBAAgB;MAAlB;IAAX,CAArB,EAAmEC,IAAnE,EAArB;;IACA,SAASC,WAAT,GAAuB;MACrB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWP,MAAX,CAAhB,CADqB,CAErB;MACA;MACA;;MACA,OAAOQ,MAAM,CAACC,MAAP,CAAcJ,OAAd,CAAP;IACD;;IACD,OAAOD,WAAW,EAAlB;EACD,CAzCY,CA0Cb;;;EACA,SAASM,mBAAT,GAA+B;IAC7B,MAAMC,WAAW,GAAGC,OAAO,CAACC,OAAR,CAAgB/B,cAAc,EAA9B,CAApB;IACA,OAAO6B,WAAW,CAACjB,IAAZ,CAAkBoB,IAAD,IAAU;MAChC,OAAOA,IAAI,CAAC,CAAD,CAAX;IACD,CAFM,CAAP;EAGD;;EACD,MAAMC,aAAa,GAAGL,mBAAtB;EACAK,aAAa,CAACrB,IAAd,CAAoBoB,IAAD,IAAU;IAC3BE,OAAO,CAACC,GAAR,CAAYH,IAAZ;EACD,CAFD,EAlDa,CA2Db;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;AAED;;KAjGQjC,G;AAmGT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}